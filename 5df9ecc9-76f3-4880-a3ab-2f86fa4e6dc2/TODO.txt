lib/core/boot.lua - boot sequence


http://www.lua.org/pil/contents.html
https://oc.cil.li/topic/864-chenthread-image-format-high-quality-images-on-opencomputers/
https://oc.cil.li/topic/1718-binary-read-and-write-how-does-it-work-exactly/

https://ocdoc.cil.li/api:filesystem

https://ocdoc.cil.li/component:gpu
https://github.com/IgorTimofeev/MineOS/wiki/Component-API 
https://oc.cil.li/topic/421-tar-for-opencomputers/ 
https://ocdoc.cil.li/api:thread


Boot options 
- Disk options 
- internet recovery
- Shutdown
- Back 


Permissions like in android 
- App would like to access OS GUI container
- Detect gpu and shit and notify in list

underline using unicode 
check find in wrap works with unicode chars
sys internal screen update loop
test the moveForward and shit 


noise api


system drivers 
- sort by rank, select best one


add a ram check program to help debug


some way to access raw GPU functions no update


TODO use copy() somehow when scrolling to lessen lag



Sectionlike structure of the man program

gui idea 
- gui divs, keep elements inside from rendering out of bounds, iwht scroll 
- div:addChild add element
- tab class - handles events

rewrite animation threads to use 1 thread to optimize memory?
- calculate itming based on thread main tick iteration to get number of ticks before counting, 
 - iterates all active animations

internal clipboard


component.ocemu.log


chart better rounding? - use percentage like in os thing

fix screen copy ignore out of bounds if out of screen
copy if set true try to copy part if possible
copy dont directly update


codeview selections and indentation lines

gui: 
list (tabs / vertical)
table
dropdown box 
code view 
chart
tree list
textarea
brailel canvas

color selector 
popup
component selector
file selector 
alert()


image lib
- flip, rotate methods, crop
more image formats

"workspaces" that can be created to handle events

GUI element - consume event and make transparent

disabled elements more apparent


validate width and shit < 0 and other checks not just checkarg
progressbar is showval then must define textcolor
check startCol is integer, etc...?

GUI needs a lot more strict checking ^




color pciker - needs some sort of z-indexing
- instead of 240 buttons calculate from mouse click


color picker should be seperate GUI object adedd



perhaps a slight optimization, but set() could just look for equal bg / fg but not char necessarily




save some colors for system 


virtual components 

system.auth() command - awaits password, no keylogging allowed!

http://www.directupload.net/file/d/4567/72sfmphs_png.htm 
https://ocdoc.cil.li/tutorial:program:install 



System
- Drivers for sound and shit, which can be interfaced instead of with direct component 
- Better component API 
- File mounts to drives

debug: https://github.com/OpenPrograms/EvaKnievel-Programs/blob/master/logger/boot/04_logger.lua
save logs in /var/log



hashlib - like base64, optional

install from compressed archive



make base64 lib optional

optimize wiht https://oc.cil.li/topic/243-memory-management/



draw \triangle

semipixel ellipse outline needs to be better 

semipixel curve


image masking - graphics object!




optimizations that don't work 
- vertical drawing
- rectangle finding 
- seralizing coordinates into strings
- try to fill with curernt bg color first then try others
- try to fill with current fg
- not setBackground or setForeground if currentBg / fg is the same, increases number of checks needed not likely to change

note that x scrollbars are smaller than y scrollbars due to 2x char height



https://www.zerochan.net/1727073 - izuna citation


https://oc.cil.li/topic/1415-pseudo-big-font-library/


boot logo solid color?


make boot work only if there is a gpu
 - organize boot sequence code!



instead of sorting by color with table use fancy shit
- save changes in the changes buffer - for first 128 indexes add to w * h for color storage
- then switch to used indexes
- have the things reference each other


terminal backgrounds!


write tests

- component browser
https://oc.cil.li/topic/835-cmb-component-methods-browser/
