lib/core/boot.lua - boot sequence


http://www.lua.org/pil/contents.html
https://oc.cil.li/topic/864-chenthread-image-format-high-quality-images-on-opencomputers/
https://oc.cil.li/topic/1718-binary-read-and-write-how-does-it-work-exactly/

https://ocdoc.cil.li/api:filesystem

https://ocdoc.cil.li/component:gpu
https://github.com/IgorTimofeev/MineOS/wiki/Component-API 
https://oc.cil.li/topic/421-tar-for-opencomputers/ 
https://ocdoc.cil.li/api:thread


Boot options 
- Disk options 
- internet recovery
- Shutdown
- Back 


Permissions like in android 
- App would like to access OS GUI container
- Detect gpu and shit and notify in list

underline using unicode 
check find in wrap works with unicode chars
sys internal screen update loop
test the moveForward and shit 


noise api


system drivers 
- sort by rank, select best one


add a ram check program to help debug


some way to access raw GPU functions no update


Sectionlike structure of the man program

gui idea 
- gui divs, keep elements inside from rendering out of bounds, iwht scroll 
- div:addChild add element
- tab class - handles events

rewrite animation threads to use 1 thread to optimize memory?
- calculate itming based on thread main tick iteration to get number of ticks before counting, 
 - iterates all active animations

internal clipboard


component.ocemu.log




option to use optimized scroll in panel and codeview

https://github.com/CrazedProgrammer/Surface2/wiki/surf:fillTriangle
https://github.com/kepler155c/opus/blob/master-1.8/sys/apis/crypto.lua



codeview longest line should be the scrollbar horz

make sure libs are update to date openos since meulator isn't


brailel graphics card
⢹⣀⣀⣀⣀⣀⣀
⢸⣷⣾⣀⣸⠰⢾
⠘ ⠛⠛⠈⠛


exit to system shell -> back to system button in terminal

ceil for upper bound in drawRectangle and - 1 for + w and + h fix in screen.lua

containers:
table of GUIContainers
- only top is processed for events (uh maybe container.stealAllEvents or something)
- default only main sys container 

- main sys container
- app container 
  - this is removed / added when switching apps

- array of additional containers
 - for alert() and shit
 - move alert() and shit to system



app
- app.close()
- app.hide()
- app.fullScreen
- app.container
- app.permissions
- app.version

-- determined from folder
- app.name
- app.icon?


gui: 
list (tabs / vertical)
tree list
textarea
brailel canvas
- semi pixel canvas? lol

color selector 
popup
component selector
file selector 
alert()
create dialogBox

GUI animations are all broken lol


image lib
- flip, rotate methods, crop
more image formats

"workspaces" that can be created to handle events

GUI element - consume event and make transparent

disabled elements more apparent



validate width and shit < 0 and other checks not just checkarg
progressbar is showval then must define textcolor
check startCol is integer, etc...?

GUI needs a lot more strict checking ^





color pciker - needs some sort of z-indexing
- instead of 240 buttons calculate from mouse click


color picker should be seperate GUI object adedd





save some colors for system 


virtual components 

system.auth() command - awaits password, no keylogging allowed!

http://www.directupload.net/file/d/4567/72sfmphs_png.htm 
https://ocdoc.cil.li/tutorial:program:install 



System
- Drivers for sound and shit, which can be interfaced instead of with direct component 
- Better component API 
- File mounts to drives

debug: https://github.com/OpenPrograms/EvaKnievel-Programs/blob/master/logger/boot/04_logger.lua
save logs in /var/log



hashlib - like base64, optional

install from compressed archive



make base64 lib optional

optimize wiht https://oc.cil.li/topic/243-memory-management/


TODO use copy() somehow when scrolling to lessen lag
- in both codeview and panel
- doesn't work as it may copy stuff overlapping

note that x scrollbars are smaller than y scrollbars due to 2x char height


https://git.daelvn.ga/filekit/ for filesystem


tidy var names 
- in functions too

replace #arr + 1 with n and inc 8x faster


invert colors to optimize somehow?






-- We can save a few hundred bytes by replacing True and False with
-- variables that can be minified
local trueVar, falseVar = true, false
local checkMultiArgFunc = checkMultiArg





gui range slider draws first, maybe not respecting update?

image masking - graphics object!








write tests!


tamamo noble phantasm as boot

出雲に神在り、是自在にして禊の証、神宝宇迦之鏡也――『 水天日光天照八野鎮石すいてんにっこうあまてらす やのしずいし……なんちゃって


optimizations that don't work 
- vertical drawing
- rectangle finding 
- seralizing coordinates into strings
- try to fill with curernt bg color first then try others
- try to fill with current fg
- not setBackground or setForeground if currentBg / fg is the same, increases number of checks needed not likely to change




gpu copy code:
  if useGpuCopy then
    local canDirectlyCopy, canPartialCopy = trueVar, falseVar

    -- We can't use gpu copy directly though if it exceeds the current bounds
    if (drawX1 ~= 1 or drawY1 ~= 1 or drawX2 ~= bufferWidth or drawY2 ~= bufferHeight) and
       (x + tx < drawX1 or x + tx + w - 1 < drawX1 or y + ty < drawY1 or y + ty + h - 1 < drawY1 or
        x + tx > drawX2 or x + tx + w - 1 > drawX2 or y + ty > drawY2 or y + ty + h - 1 > drawY2) then
      canDirectlyCopy = falseVar
    end

    if canDirectlyCopy then
      update() -- Update current change buffer
      GPUcopy(x, y, w, h, tx, ty)
    else
      -- Intersect of draw bounds and the copied rectangle
      -- (Copied portion that can be displayed)
      local ix1, iy1, ix2, iy2 = max(drawX1, x + tx), max(drawY1, y + ty), min(drawX2, x + w + tx), min(drawY2, y + h + ty)

      if ix1 >= ix2 or iy1 >= iy2 then else -- If there is an intersection copy() it over
        update() -- Update current change buffer
        GPUcopy(ix1 - tx, iy1 - ty, ix2 - ix1 + 1, iy2 - iy1 + 1, tx, ty)
        canPartialCopy = trueVar
      end
    end
  end


https://www.zerochan.net/1727073 - izuna citation


https://oc.cil.li/topic/1415-pseudo-big-font-library/


boot logo solid color?


make boot work only if there is a gpu
 - organize boot sequence code!



terminal backgrounds!


write tests

- component browser
https://oc.cil.li/topic/835-cmb-component-methods-browser/
