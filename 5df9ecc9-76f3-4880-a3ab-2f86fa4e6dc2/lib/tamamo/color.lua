-- API
local api = {}

-- Optimization for lua
local sqrt = math.sqrt

-- The fixed 240 color palette used by OC
api.preset_palette = {0x000000,0x002400,0x004900,0x006D00,0x009200,0x00B600,0x00D800,0x00FF00,0x000040,0x002440,0x004940,0x006D40,0x009240,0x00B640,0x00D840,0x00FF40,0x000080,0x002480,0x004980,0x006D80,0x009280,0x00B680,0x00D880,0x00FF80,0x0000C0,0x0024C0,0x0049C0,0x006DC0,0x0092C0,0x00B6C0,0x00D8C0,0x00FFC0,0x0000FF,0x0024FF,0x0049FF,0x006DFF,0x0092FF,0x00B6FF,0x00D8FF,0x00FFFF,0x330000,0x332400,0x334900,0x336D00,0x339200,0x33B600,0x33D800,0x33FF00,0x330040,0x332440,0x334940,0x336D40,0x339240,0x33B640,0x33D840,0x33FF40,0x330080,0x332480,0x334980,0x336D80,0x339280,0x33B680,0x33D880,0x33FF80,0x3300C0,0x3324C0,0x3349C0,0x336DC0,0x3392C0,0x33B6C0,0x33D8C0,0x33FFC0,0x3300FF,0x3324FF,0x3349FF,0x336DFF,0x3392FF,0x33B6FF,0x33D8FF,0x33FFFF,0x660000,0x662400,0x664900,0x666D00,0x669200,0x66B600,0x66D800,0x66FF00,0x660040,0x662440,0x664940,0x666D40,0x669240,0x66B640,0x66D840,0x66FF40,0x660080,0x662480,0x664980,0x666D80,0x669280,0x66B680,0x66D880,0x66FF80,0x6600C0,0x6624C0,0x6649C0,0x666DC0,0x6692C0,0x66B6C0,0x66D8C0,0x66FFC0,0x6600FF,0x6624FF,0x6649FF,0x666DFF,0x6692FF,0x66B6FF,0x66D8FF,0x66FFFF,0x990000,0x992400,0x994900,0x996D00,0x999200,0x99B600,0x99D800,0x99FF00,0x990040,0x992440,0x994940,0x996D40,0x999240,0x99B640,0x99D840,0x99FF40,0x990080,0x992480,0x994980,0x996D80,0x999280,0x99B680,0x99D880,0x99FF80,0x9900C0,0x9924C0,0x9949C0,0x996DC0,0x9992C0,0x99B6C0,0x99D8C0,0x99FFC0,0x9900FF,0x9924FF,0x9949FF,0x996DFF,0x9992FF,0x99B6FF,0x99D8FF,0x99FFFF,0xCC0000,0xCC2400,0xCC4900,0xCC6D00,0xCC9200,0xCCB600,0xCCD800,0xCCFF00,0xCC0040,0xCC2440,0xCC4940,0xCC6D40,0xCC9240,0xCCB640,0xCCD840,0xCCFF40,0xCC0080,0xCC2480,0xCC4980,0xCC6D80,0xCC9280,0xCCB680,0xCCD880,0xCCFF80,0xCC00C0,0xCC24C0,0xCC49C0,0xCC6DC0,0xCC92C0,0xCCB6C0,0xCCD8C0,0xCCFFC0,0xCC00FF,0xCC24FF,0xCC49FF,0xCC6DFF,0xCC92FF,0xCCB6FF,0xCCD8FF,0xCCFFFF,0xFF0000,0xFF2400,0xFF4900,0xFF6D00,0xFF9200,0xFFB600,0xFFD800,0xFFFF00,0xFF0040,0xFF2440,0xFF4940,0xFF6D40,0xFF9240,0xFFB640,0xFFD840,0xFFFF40,0xFF0080,0xFF2480,0xFF4980,0xFF6D80,0xFF9280,0xFFB680,0xFFD880,0xFFFF80,0xFF00C0,0xFF24C0,0xFF49C0,0xFF6DC0,0xFF92C0,0xFFB6C0,0xFFD8C0,0xFFFFC0,0xFF00FF,0xFF24FF,0xFF49FF,0xFF6DFF,0xFF92FF,0xFFB6FF,0xFFD8FF,0xFFFFFF}

-- Convert r, g, b values to 24 bit int --
function api.toHexFromRGB(r, g, b)
  return r * 65536 + g * 256 + b
end

function api.toRGBFromHex(hex)
  local r, g
  r = hex / 65536
  r = r - r % 1
  g = (hex - r * 65536) / 256
  g = g - g % 1
  return r, g, hex - r * 65536 - g * 256
end

function api.blend(base, color, amount)
  amount = amount or 1
  if amount >= 1 then return color end
  if amount <= 0 then return base end

  local r1, g1, b1, r2, g2, b2
  r1, g1, b1 = api.toRGBFromHex(base)
  r2, g2, b2 = api.toRGBFromHex(color)

  local inverted = 1 - amount
				
  local r, g, b =
    r2 * inverted + r1 * amount,
    g2 * inverted + g1 * amount,
    b2 * inverted + b1 * amount

  return api.toHexFromRGB(r - r % 1, g - g % 1, b - b % 1)
end

function api.prettyPrintHex(hex)
  local r, g, b = api.toRGBFromHex(hex)
  return "(" .. r .. ", " .. g .. ", " .. b .. ")"
end

  -- return api.toHexFromRGB(
  --   sqrt((1 - amount) * r1 * r1 + amount * r2 * r2),
  --   sqrt((1 - amount) * g1 * g1 + amount * g2 * g2),
  --   sqrt((1 - amount) * b1 * b1 + amount * b2 * b2))

return api